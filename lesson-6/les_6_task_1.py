# Тесты выполнены на Linux Mint 20.3. Разрядность: 64
# Python 3.8.10

# Выбрано задание #6 из урока 3
# 6. В одномерном массиве найти сумму элементов, находящихся между минимальным и максимальным элементами.
# Сами минимальный и максимальный элементы в сумму не включать.
import sys
from functools import reduce


# Получение значений всех переменных
def get_variables(ret_names=False):
    return [v if not ret_names else i for i, v in globals().items() if
            not i.startswith('_') and not hasattr(v, '__name__')]


# Расчёт выделеной памяти
def calc_memory():
    _processed = set()  # список для хранения уже обработанных адресов памяти

    def _get_size(object):
        object_id = id(object)
        if object_id in _processed:  # Проверим не обрабатывали ли мы этот адрес памяти
            return 0  # Нет смысла суммировать уже обработанный адрес
        size = sys.getsizeof(object)
        _processed.add(object_id)
        if hasattr(object, '__iter__') and not isinstance(object, str):
            if hasattr(object, 'items'):  # Проверка на словаль типа ключ-значение
                size += sum(_get_size(k) + _get_size(v) for k, v in getattr(object, 'items')())
            else:
                size += sum(_get_size(v) for v in object)
        return size

    return _get_size(get_variables())


# LENGTH = 100
# Вариант №1
# items = [21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5, 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17, 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37, 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81]
# max_idx = 0
# min_idx = 0
# for idx, item in enumerate(items):
#     if item < items[min_idx]:
#         min_idx = idx
#     if item > items[max_idx]:
#         max_idx = idx
# if min_idx > max_idx:
#     min_idx, max_idx = max_idx, min_idx
# result = 0
# for idx, item in enumerate(items):
#     if min_idx < idx < max_idx:
#         result += item
#
# print('Затраты памяти: %s' % calc_memory())
# print('Переменные', get_variables(True))
# print('Значения переменных:', get_variables(), sep="\n")

# Затраты памяти: 2764
# Переменные ['LENGTH', 'items', 'max_idx', 'min_idx', 'idx', 'item', 'result']
# Значения переменных:
# [[21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5,
# 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17,
# 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37,
# 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81], 72, 31, 99, 81, 2082]



# Вариант №2
# result = 0
# items = [21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5, 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17, 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37, 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81]
# min_idx, max_idx = items.index(min(items)), items.index(max(items))
# if min_idx > max_idx:
#     min_idx, max_idx = max_idx, min_idx
# try:
#     result = reduce(lambda x, y: x + y, items[min_idx + 1:max_idx])
# except TypeError:
#     pass
# print('Затраты памяти: %s' % calc_memory())
# print('Переменные', get_variables(True))
# print('Значения переменных:', get_variables(), sep="\n")

# Затраты памяти: 2732
# Переменные ['result', 'items', 'min_idx', 'max_idx']
# Значения переменных:
# [2082, [21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5, 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17, 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37, 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81], 31, 72]


# Вариант №3
result = 0
items = (21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5, 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17, 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37, 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81)
min_idx, max_idx = items.index(min(items)), items.index(max(items))
if min_idx > max_idx:
    min_idx, max_idx = max_idx, min_idx
result = sum(items[min_idx + 1:max_idx])
print('Затраты памяти: %s' % calc_memory())
print('Переменные', get_variables(True))
print('Значения переменных:', get_variables(), sep="\n")

# Затраты памяти: 2716
# Переменные ['result', 'items', 'min_idx', 'max_idx']
# Значения переменных:
# [2082, (21, 5, 76, 3, 71, 93, 13, 67, 55, 18, 52, 90, 56, 23, 12, 67, 65, 87, 40, 99, 85, 90, 39, 64, 3, 33, 99, 5, 86, 28, 6, 100, 81, 70, 95, 67, 67, 52, 52, 35, 36, 67, 45, 77, 8, 23, 16, 46, 49, 71, 58, 58, 68, 14, 70, 74, 17, 87, 100, 41, 26, 67, 36, 7, 77, 60, 94, 27, 45, 17, 63, 19, 0, 17, 94, 72, 21, 34, 60, 97, 31, 35, 97, 12, 73, 37, 99, 51, 0, 54, 17, 55, 4, 42, 14, 44, 36, 21, 12, 81), 31, 72]


# Выводы:
# Самым менее затратным получился вариант №3, за счёт того что кортеж занимает в памяти меньше места чем список,
# плюс не использует лишних переменных